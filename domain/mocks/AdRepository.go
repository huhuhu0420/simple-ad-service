// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/huhuhu0420/simple-ad-service/domain"
	mock "github.com/stretchr/testify/mock"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// CreateAd provides a mock function with given fields: ad, conditions
func (_m *AdRepository) CreateAd(ad domain.AdInfo, conditions domain.Conditions) error {
	ret := _m.Called(ad, conditions)

	if len(ret) == 0 {
		panic("no return value specified for CreateAd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.AdInfo, domain.Conditions) error); ok {
		r0 = rf(ad, conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAd provides a mock function with given fields: searchAdRequest
func (_m *AdRepository) GetAd(searchAdRequest domain.SearchAdRequest) (*domain.AdsResponse, error) {
	ret := _m.Called(searchAdRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetAd")
	}

	var r0 *domain.AdsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.SearchAdRequest) (*domain.AdsResponse, error)); ok {
		return rf(searchAdRequest)
	}
	if rf, ok := ret.Get(0).(func(domain.SearchAdRequest) *domain.AdsResponse); ok {
		r0 = rf(searchAdRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AdsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.SearchAdRequest) error); ok {
		r1 = rf(searchAdRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAgeRange provides a mock function with given fields: id, ageStart, ageEnd
func (_m *AdRepository) InsertAgeRange(id int, ageStart int, ageEnd int) error {
	ret := _m.Called(id, ageStart, ageEnd)

	if len(ret) == 0 {
		panic("no return value specified for InsertAgeRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(id, ageStart, ageEnd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCountry provides a mock function with given fields: id, country
func (_m *AdRepository) InsertCountry(id int, country []string) error {
	ret := _m.Called(id, country)

	if len(ret) == 0 {
		panic("no return value specified for InsertCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertGender provides a mock function with given fields: id, gender
func (_m *AdRepository) InsertGender(id int, gender []string) error {
	ret := _m.Called(id, gender)

	if len(ret) == 0 {
		panic("no return value specified for InsertGender")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, gender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewAd provides a mock function with given fields: title, startAt, endAt
func (_m *AdRepository) InsertNewAd(title string, startAt string, endAt string) (int, error) {
	ret := _m.Called(title, startAt, endAt)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewAd")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (int, error)); ok {
		return rf(title, startAt, endAt)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) int); ok {
		r0 = rf(title, startAt, endAt)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(title, startAt, endAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPlatform provides a mock function with given fields: id, platform
func (_m *AdRepository) InsertPlatform(id int, platform []string) error {
	ret := _m.Called(id, platform)

	if len(ret) == 0 {
		panic("no return value specified for InsertPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, platform)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
